name: Build Binaries

on:
  push:
    branches: [ feature_lnfi_build ]
  pull_request:
    branches: [ feature_lnfi_build ]

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: ilammy/setup-nasm@v1

    - name: Checkout repository (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Ensure submodules initialized
      run: git submodule update --init --recursive

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Add targets
      run: |
        rustup target add x86_64-unknown-linux-gnu
        rustup target add x86_64-pc-windows-gnu
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin

    - name: Install Linux cross compile tool (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y pkg-config curl build-essential

    - name: Install musl cross-compile toolchain
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl -L https://musl.cc/x86_64-linux-musl-cross.tgz | tar xz -C /tmp
        sudo mv /tmp/x86_64-linux-musl-cross /opt/musl
        
        echo "/opt/musl/bin" >> $GITHUB_PATH

    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        rustup target add x86_64-unknown-linux-musl
        
        export CC=x86_64-linux-musl-gcc
        export AR=x86_64-linux-musl-ar
        export STRIP=x86_64-linux-musl-strip
        export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc
        
        cargo build --release --target x86_64-unknown-linux-musl

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo build --release --target x86_64-pc-windows-gnu

    - name: Build (macOS - aarch64)
      if: matrix.os == 'macos-latest'
      run: cargo build --release --target aarch64-apple-darwin

    - name: Build (macOS - x86_64)
      if: matrix.os == 'macos-latest'
      run: cargo build --release --target x86_64-apple-darwin

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binaries
        path: |
          target/*/release/rgb-lightning-node*